SELECT * FROM SHIPPERS;

-- PROJECTION (FILTER OF COLUMNS)
SELECT CATEGORY_NAME, DESCRIPTION FROM CATEGORIES;

-- SELECTION (FILTER OF ROWS)
SELECT * 
    FROM PRODUCTS 
    WHERE UNIT_PRICE >= 50;
    
SELECT PRODUCT_NAME, UNIT_PRICE, UNIT_PRICE*5/100 AS PROFIT
FROM PRODUCTS;

SELECT * FROM EMPLOYEES WHERE REGION IS NULL;
SELECT * FROM EMPLOYEES WHERE REGION IS NOT NULL;

-- STRING CONCATENATION (CANNOT USE + WITH CHAR/VARCHAR)
SELECT FIRSTNAME, LASTNAME, 
    ADDRESS || ', ' || CITY || ', ' || REGION AS ADDRESS 
    FROM EMPLOYEES;

SELECT FIRSTNAME, LASTNAME
    FROM EMPLOYEES
    WHERE HIREDATE >= '01-10-93' AND HIREDATE <= '31-10-93';


SELECT PRODUCT_ID, PRODUCT_NAME, UNIT_PRICE
    FROM PRODUCTS
    WHERE CATEGORY_ID = 1;
    
SELECT PRODUCT_ID, PRODUCT_NAME, UNIT_PRICE, CATEGORY_ID
    FROM PRODUCTS
    WHERE CATEGORY_ID IN (1, 3, 7);
    
SELECT * FROM PRODUCTS
    WHERE UNITS_IN_STOCK <> 0;

SELECT * FROM PRODUCTS
    WHERE UNIT_PRICE BETWEEN 40 AND 50;
    
SELECT DISTINCT CITY FROM CUSTOMERS;

-- STRING COMPARISON IS CASE SENSITIVE
SELECT COMPANY_NAME, CONTACT_NAME, CONTACT_TITLE, CITY
    FROM CUSTOMERS
    WHERE UPPER(CITY) IN ('LONDON', 'PARIS', 'MADRID');

SELECT * FROM SUPPLIERS;

SELECT COMPANY_NAME, CONTACT_NAME, CONTACT_TITLE, FAX
    FROM SUPPLIERS
    WHERE FAX IS NOT NULL;

-- ALL KINDS OF MANAGERS
SELECT COMPANY_NAME, CONTACT_NAME, CONTACT_TITLE, FAX
    FROM SUPPLIERS
    WHERE UPPER(CONTACT_TITLE) LIKE '%MANAGER';
    
SELECT COMPANY_NAME, CONTACT_NAME, CONTACT_TITLE, FAX
    FROM SUPPLIERS
    WHERE UPPER(CONTACT_TITLE) LIKE 'SALES%';
    
SELECT COMPANY_NAME, CONTACT_NAME, CITY
    FROM CUSTOMERS
    WHERE UPPER(CONTACT_NAME) LIKE '%ANN%';
    
SELECT * FROM EMPLOYEES
    WHERE HIREDATE LIKE '%-10-%';
    
SELECT * FROM PRODUCTS WHERE UNIT_PRICE  > 40 AND DISCONTINUED='N';    
        
SELECT * FROM PRODUCTS WHERE UNIT_PRICE > 40
INTERSECT
SELECT * FROM PRODUCTS WHERE DISCONTINUED='N';
        
SELECT * FROM PRODUCTS WHERE SUPPLIER_ID=1 OR CATEGORY_ID=2;
        
SELECT * FROM PRODUCTS 
    ORDER BY CATEGORY_ID ASC;
        
SELECT * FROM PRODUCTS 
    ORDER BY CATEGORY_ID, UNIT_PRICE DESC, PRODUCT_NAME;
        
                
SELECT COUNT(*) FROM CUSTOMERS; -- CHECK THE NUMBER OF ROWS IN A TABLE
        
SELECT COUNT(UNIT_PRICE), 
    MIN(UNIT_PRICE),
    MAX(UNIT_PRICE),
    AVG(UNIT_PRICE),
    SUM(UNIT_PRICE)
    FROM PRODUCTS;
        
SELECT COMPANY_NAME, UPPER(COMPANY_NAME) FROM SUPPLIERS;        
        
SELECT CATEGORY_ID, UNIT_PRICE FROM PRODUCTS ORDER BY CATEGORY_ID;
        
SELECT CATEGORY_ID, COUNT(*), AVG(UNIT_PRICE), MAX(UNIT_PRICE), MIN(UNIT_PRICE)
    FROM PRODUCTS 
    GROUP BY CATEGORY_ID;        
        
SELECT CATEGORY_ID, COUNT(*), AVG(UNIT_PRICE), MAX(UNIT_PRICE), MIN(UNIT_PRICE)
    FROM PRODUCTS 
    GROUP BY CATEGORY_ID
    HAVING COUNT(*) >= 10; -- AGGREGATE FUNCTIONS CANNOT BE USED IN WHERE CLAUSE
        
-- CARTESIAN PRODUCT      
-- EACH ROW OF T1 IS DISPLAYED WITH EVERY ROW OF T2
SELECT T1.PRODUCT_ID, T1.PRODUCT_NAME, T1.UNIT_PRICE, T1.CATEGORY_ID,
    T2.CATEGORY_ID, T2.CATEGORY_NAME
    FROM PRODUCTS T1, CATEGORIES T2;
        
-- JOIN (FETCH DATA FROM MORE THAN ONE TABLE USING A CONDITION)
SELECT T1.PRODUCT_ID, T1.PRODUCT_NAME, T1.UNIT_PRICE, 
    T2.CATEGORY_NAME
    FROM PRODUCTS T1, CATEGORIES T2
    WHERE T1.CATEGORY_ID = T2.CATEGORY_ID
    ORDER BY PRODUCT_NAME;
                
SELECT PRODUCT_ID, PRODUCT_NAME, UNIT_PRICE, 
    CATEGORY_NAME
    FROM PRODUCTS, CATEGORIES
    WHERE PRODUCTS.CATEGORY_ID = CATEGORIES.CATEGORY_ID
    ORDER BY PRODUCT_NAME;        

SELECT PRODUCT_ID, PRODUCT_NAME, UNIT_PRICE, 
    CATEGORY_NAME
    FROM PRODUCTS P
    JOIN CATEGORIES C
    ON P.CATEGORY_ID=C.CATEGORY_ID  -- CONDITION FOR JOIN
    WHERE UNIT_PRICE>40             -- CONDITION FOR FILTER
    ORDER BY PRODUCT_ID;


SELECT O.ORDER_ID, O.ORDER_DATE, O.REQUIRED_DATE, O.SHIPPED_DATE, -- ORDERS TABLE
    C.COMPANY_NAME, C.CONTACT_NAME, -- CUSTOMERS TABLE
    E.FIRSTNAME || ' ' || E.LASTNAME AS EMPLOYEE_NAME, -- EMPLOYEES TABLE
    SH.COMPANY_NAME AS SHIPPER_NAME -- SHIPPERS TABLE
    FROM ORDERS O
    JOIN CUSTOMERS C
        ON O.CUSTOMER_ID=C.CUSTOMER_ID
    JOIN EMPLOYEES E
        ON O.EMPLOYEE_ID=E.EMPLOYEE_ID
    JOIN SHIPPERS SH
        ON O.SHIP_VIA=SH.SHIPPER_ID
    ORDER BY ORDER_ID;

















